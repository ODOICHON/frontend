name: Deploy
on:
  push:
    branches: ['main', 'develop']

env:
  PROJECT_NAME: duaily-client

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout source code. # Repo checkout
        uses: actions/checkout@v2

      - name: Check Node v # Node v 확인
        run: node -v

      - name: Cache node modules # node modules 캐싱
        uses: actions/cache@v1
        with: # with 구문으로 설정할 수 있는데, path와 key를 반드시 설정해주어야 함
          path: node_modules # 저장하고 불러올 캐시 대상 폴더
          key: ${{ runner.OS }}-build-${{ hashFiles('**/package-lock.json') }} # 저장하고 불러올 때 식별할 수 있는 키 값
          restore-keys:
            | # 캐시 key가 일치하는 것이 없을 때, 차선택으로 캐싱 폴더를 찾는 key
            ${{ runner.OS }}-build-
            ${{ runner.OS }}-

      - name: Install Dependencies # 의존 파일 설치
        run: yarn install --frozen-lockfile

      - name: Setting .env (Dev) # 환경변수 세팅 (DEV)
        if: contains(github.ref, 'develop')
        run: echo "${{ secrets.REACT_ENV_DEV }}" >> .env

      - name: Setting .env (Prod) # 환경변수 세팅 (PROD)
        if: contains(github.ref, 'main')
        run: |
          echo "${{ secrets.REACT_ENV }}" >> .env

      - name: Build # React Build
        run: yarn build

      - name: Modify appspec.yml (Dev)
        if: contains(github.ref, 'develop')
        run: |
          sed -i "s|destination: /home/filename/client|destination: /home/${{ secrets.APPSPEC_FILES_FILENAME_DEV }}/client|g" appspec.yml
          sed -i "s|owner: owner|owner: ${{ secrets.APPSPEC_PERMISSIONS_OWNER_DEV }}|g" appspec.yml
          sed -i "s|group: group|group: ${{ secrets.APPSPEC_PERMISSIONS_GROUP_DEV}}|g" appspec.yml

      - name: Modify appspec.yml (Prod)
        if: contains(github.ref, 'main')
        run: |
          sed -i "s|destination: /home/filename/client|destination: /home/${{ secrets.APPSPEC_FILES_FILENAME }}/client|g" appspec.yml
          sed -i "s|owner: owner|owner: ${{ secrets.APPSPEC_PERMISSIONS_OWNER }}|g" appspec.yml
          sed -i "s|group: group|group: ${{ secrets.APPSPEC_PERMISSIONS_GROUP}}|g" appspec.yml

      - name: zip create # zip 파일을 만듭니다
        run: zip -r ./$GITHUB_SHA.zip ./dist appspec.yml
        shell: bash

      - name: Configure AWS credentials (Dev) # AWS 세팅 (DEV)
        if: contains(github.ref, 'develop')
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID_DEV }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY_DEV }}
          aws-region: ${{ secrets.AWS_REGION_DEV }}

      - name: Configure AWS credentials (Prod) # AWS 세팅 (PROD)
        if: contains(github.ref, 'main')
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Upload to S3 (Dev) # S3에 파일 업로드 (DEV)
        if: contains(github.ref, 'develop')
        run: aws s3 cp --region ${{ secrets.S3_REGION_DEV }} ./$GITHUB_SHA.zip s3://${{ secrets.S3_BUCKET_NAME_DEV }}/$PROJECT_NAME/$GITHUB_SHA.zip

      - name: Upload to S3 (Prod) # S3에 파일 업로드 (PROD)
        if: contains(github.ref, 'main')
        run: aws s3 cp --region ${{ secrets.S3_REGION }} ./$GITHUB_SHA.zip s3://${{ secrets.S3_BUCKET_NAME }}/$PROJECT_NAME/$GITHUB_SHA.zip

      - name: Code Deploy (Dev) # CodeDeploy 배포 (DEV)
        if: contains(github.ref, 'develop')
        run: |
          aws deploy create-deployment \
          --application-name duaily-dev-deploy \
          --deployment-config-name CodeDeployDefault.AllAtOnce \
          --deployment-group-name ${{ secrets.DEPLOY_GROUP_DEV }} \
          --s3-location bucket=${{ secrets.S3_BUCKET_NAME_DEV }},bundleType=zip,key=$PROJECT_NAME/$GITHUB_SHA.zip

      - name: Code Deploy (Prod) # CodeDeploy 배포 (PROD)
        if: contains(github.ref, 'main')
        run: |
          aws deploy create-deployment \
          --application-name duaily-deploy \
          --deployment-config-name CodeDeployDefault.AllAtOnce \
          --deployment-group-name ${{ secrets.DEPLOY_GROUP }} \
          --s3-location bucket=${{ secrets.S3_BUCKET_NAME }},bundleType=zip,key=$PROJECT_NAME/$GITHUB_SHA.zip
